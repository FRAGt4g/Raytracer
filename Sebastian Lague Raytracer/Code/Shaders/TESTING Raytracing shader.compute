#pragma kernel CSMain

struct Skin {
    float3 albedo;
    float3 specular;
};

struct Sphere {
    float3 position;
    float radius;
    Skin  material;
};

struct Ray {
    float3 origin;
    float3 direction;
    float3 energy;
};

struct RayHit {
    float3 position;
    float3 normal;
    float distance;

    Skin material;
};

RWTexture2D<float4> Result;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

StructuredBuffer<Sphere> _Spheres;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

float4 _DirectionalLight;
float2 _PixelOffset;

static const float PI = 3.14159265f;

Skin CreateSkin() {
    Skin material;
    material.specular = float3(0, 0, 0);
    material.albedo = float3(0, 0, 0);
    return material;
}

Skin CreateSkin(float3 specular, float3 albedo) {
    Skin material;
    material.specular = specular;
    material.albedo = albedo;
    return material;
}

RayHit CreateRayHit() {
    RayHit hit;
    hit.position = float3(0, 0, 0);
    hit.distance = 1.#INF;
    hit.normal = float3(0, 0, 0);
    hit.material = CreateSkin(float3(0, 0, 0), float3(0, 0, 0));
    return hit;
}

Ray CreateRay(float3 origin, float3 direction) {
    Ray r;
    r.origin = origin;
    r.direction = direction;
    r.energy = float3(1, 1, 1);
    return r;
}

Ray CreateCameraRay(float2 uv) {
    float3 camera_center = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;

    //Take xy coordinates (uv) and convert it to a ray direction
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;

    //Convert direction from camera space to world space and then normalize
    direction = mul(_CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);

    return CreateRay(camera_center, direction);
}

void CheckGroundIntersect(Ray ray, inout RayHit bestHit) {
    // Calculate distance along the ray where the ground plane is intersected
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        bestHit.material = CreateSkin(float3(0.8, 0.8, 0.8), float3(0.04, 0.04, 0.04));
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere) {
    // Calculate distance along the ray where the sphere is intersected
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.material = CreateSkin(sphere.material.albedo, sphere.material.specular);
    }
}

RayHit TraceRay(Ray ray) {
    RayHit hit = CreateRayHit();
    CheckGroundIntersect(ray, hit);
    
    // Trace spheres
    uint numSpheres, stride;
    _Spheres.GetDimensions(numSpheres, stride);
    for (uint i = 0; i < numSpheres; i++) {
        IntersectSphere(ray, hit, _Spheres[i]);
    }
    
    return hit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF) {
        float3 specularColor = hit.material.specular;
        float3 albedo = hit.material.albedo;

        ray.origin = hit.position + hit.normal * 0.001;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= specularColor;

        Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1 * _DirectionalLight.xyz);
        RayHit shadowHit = TraceRay(shadowRay);
        if (shadowHit.distance != 1.#INF) {
            return float3(0, 0, 0);
        }       

        // Return the normal
        return saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * albedo;
    }
    else {
        ray.energy = 0;

        // Sample the skybox and write it
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);
    
    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);
    
    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);

    float3 endColor = float3(0, 0, 0);
    for (int i = 0; i < 8; i++) {
        RayHit hit = TraceRay(ray);
        endColor += ray.energy * Shade(ray, hit);

        if (all(ray.energy == float3(0, 0, 0))) {
            break;
        }
    }

    Result[id.xy] = float4(endColor, 1);
}
